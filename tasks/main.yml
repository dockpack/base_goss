---
# tasks for base_goss
# Standards: 0.2
# yamllint disable rule:line-length
- name: Install ca-certificates
  apt:
    name: ca-certificates
  register: network_access
  until: network_access is success
  retries: 10
  delay: 2
  when: ansible_os_family == 'Debian'
  tags:
    - base_goss

- name: Install EPEL
  when: ansible_os_family == 'RedHat'
  yum:
    name: epel-release
    state: present
  register: epel_install
  until: epel_install is success
  retries: 3
  delay: 3

- name: Install jmespath
  # when: ansible_os_family == 'RedHat'
  package:
    name: python3-jmespath
    state: present
    update_cache: true
  register: network_access
  until: network_access is success
  retries: 3
  delay: 10
  tags:
    - base_goss

- block:
    - name: Get goss binary
      become: false
      delegate_to: localhost
      get_url:
        url: "https://github.com/aelsabbahy/goss/releases/download/{{ goss_version }}/goss-linux-amd64"
        sha256sum: "{{ goss[goss_version].sha256sum }}"
        validate_certs: false
        dest: "/tmp/goss"
        mode: 0755
      register: network_access
      until: network_access is success
      retries: 10
      delay: 2
      tags:
        - base_goss

    - name: Ensure we have local copy of goss
      become: false
      delegate_to: localhost
      stat:
        path: /tmp/goss
      register: goss_bin
      tags:
        - base_goss

    - name: Copy goss to remote
      copy:
        src: "/tmp/goss"
        dest: "{{ goss_path }}/goss"
        owner: "{{ goss_user }}"
        group: "{{ goss_user }}"
        mode: 0755
      when: goss_bin.stat.exists
      tags:
        - base_goss
  when: goss_download == 'localhost'

- name: Get goss binary directly
  get_url:
    url: "https://github.com/aelsabbahy/goss/releases/download/{{ goss_version }}/goss-linux-amd64"
    sha256sum: "{{ goss[goss_version].sha256sum }}"
    validate_certs: false
    dest: "{{ goss_path }}/goss"
    owner: "{{ goss_user }}"
    group: "{{ goss_user }}"
    mode: 0755
  register: network_access
  until: network_access is success
  retries: 10
  delay: 2
  when: goss_download == 'direct'
  tags:
    - base_goss

- name: Copy dgoss to remote
  copy:
    src: "dgoss"
    dest: "{{ goss_path }}/dgoss"
    mode: 0755
  no_log: true
  when: goss_install_dgoss|bool
  tags:
    - base_goss

- name: "Ensure {{ goss_test_directory }} exists"
  file:
    path: "{{ goss_test_directory }}"
    state: directory
    owner: "{{ goss_user }}"
    group: "{{ goss_user }}"
    mode: "{{ goss_test_directory_mode }}"
  tags:
    - base_goss

- name: Copy test_goss.yaml to remote
  template:
    src: test_goss.yaml.j2
    dest: "{{ goss_test_directory }}/test_goss.yaml"
    mode: 0644
  tags:
    - base_goss

- name: Copy goss.yaml to remote
  template:
    src: goss.yaml.j2
    dest: "/root/goss.yaml"
    mode: 0644
  tags:
    - base_goss
    - validate

- name: Ensure we have remote copy of goss
  stat:
    path: "{{ goss_dst }}"
  register: goss_bin_remote
  tags:
    - base_goss
    - validate

- block:
    - name: Execute Goss tests
      command: "{{ goss_dst }} -g /root/goss.yaml validate --format json"
      register: test_results
      changed_when: false
      failed_when: false
      check_mode: false

    - name: Show failing Goss tests
      debug:
        msg: "Goss test failed"
      loop: "{{ test_results.stdout | from_json | json_query(query) }}"
      vars:
        query: 'results[?successful==`false`]."summary-line"'
      when: test_results.rc != 0
      failed_when: test_results.rc != 0

  when: goss_bin_remote.stat.exists
  tags:
    - base_goss
    - validate
...
