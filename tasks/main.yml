---
- name: Install ca-certificates
  apt:
    name: ca-certificates
  register: network_access
  until: network_access is success
  retries: 10
  delay: 2
  when: ansible_os_family == 'Debian'
  tags:
    - base_goss

- name: "get goss binary"
  become: no
  delegate_to: localhost
  retries: 5
  delay: 5
  get_url:
    url: "https://github.com/aelsabbahy/goss/releases/download/{{ goss_version }}/goss-linux-amd64"
    validate_certs: no  # for the proxy chain
    dest: "/tmp/goss"
    mode: 0755
  tags:
    - base_goss

- name: "copy goss to remote"
  copy:
    src: "/tmp/goss"
    dest: "{{ goss_path }}/goss"
    mode: 0755
  tags:
    - base_goss

- name: "copy dgoss to remote"
  copy:
    src: "dgoss"
    dest: "{{ goss_path }}/dgoss"
    mode: 0755
  no_log: yes
  tags:
    - base_goss

- name: "copy test_goss.yml to remote"
  template:
    src: goss.yaml
    dest: "/root/test_goss.yml"
  tags:
    - base_goss

- name: "verify if /root/goss.yaml exists"
  stat:
    path: /root/goss.yaml
  register: yamlfile
  tags:
    - base_goss

- name: "render goss.yaml on remote"
  script: goss_render.sh
  when: not yamlfile.stat.exists
  tags:
    - base_goss
    - validate


- name: Execute Goss tests
  command: "{{ goss_dst }} -g /root/goss.yaml validate --format {{ goss_format }}"
  register: test_results
  changed_when: false
  tags:
    - base_goss
    - validate

- name: Display details about the Goss results
  debug:
    msg: "{{ test_results.stdout_lines }}"
  tags:
    - base_goss
    - validate

- name: Fail when tests fail
  fail:
    msg: "Goss failed to validate"
  when: test_results.rc != 0
  tags:
    - base_goss
    - validate
